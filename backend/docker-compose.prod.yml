version: '3.8'

services:
  # PostgreSQL database with PostGIS extension
  db:
    image: postgis/postgis:15-3.3
    container_name: floatchat-db-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-floatchat_db}
      POSTGRES_USER: ${POSTGRES_USER:-floatchat_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-floatchat_password}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-md5}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./scripts/init_postgis.sql:/docker-entrypoint-initdb.d/init_postgis.sql:ro
    networks:
      - floatchat-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-floatchat_user} -d ${POSTGRES_DB:-floatchat_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: floatchat-redis-prod
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - floatchat-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    command: redis-server --appendonly yes --maxmemory 200mb --maxmemory-policy allkeys-lru

  # FloatChat backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: floatchat-api-prod
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-floatchat_user}:${POSTGRES_PASSWORD:-floatchat_password}@db:5432/${POSTGRES_DB:-floatchat_db}
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=False
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-["http://localhost:3000","http://localhost:8080"]}
    volumes:
      - ./logs:/app/logs
      - floatchat_data:/app/data
    networks:
      - floatchat-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      replicas: 1

  # Nginx reverse proxy (optional, for production load balancing)
  nginx:
    image: nginx:alpine
    container_name: floatchat-nginx-prod
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - floatchat-network
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  floatchat_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  floatchat-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
